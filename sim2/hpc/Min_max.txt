#include <limits.h>
#include <omp.h>
#include <stdlib.h>
#include <array>
#include <chrono>
#include <functional>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

void s_avg(int arr[], int n)
{
    long sum = 0L;
    int i;
    for (i = 0; i < n; i++)
    {
        sum = sum + arr[i];
    }
    cout << "\nAverage = " << sum / long(n) << "\n";
}

void p_avg(int arr[], int n)
{
    long sum = 0L;
    int i;
#pragma omp parallel for reduction(+ : sum) num_threads(2)
    for (i = 0; i < n; i++)
    {
        sum = sum + arr[i];
    }
    // cout << "\nAverage = " << sum / long(n) << "\n";
}

void s_sum(int arr[], int n)
{
    long sum = 0L;
    int i;
    for (i = 0; i < n; i++)
    {
        sum = sum + arr[i];
    }
    cout << "\nSum = " << sum << "\n";
}

void p_sum(int arr[], int n)
{
    long sum = 0L;
    int i;
#pragma omp parallel for reduction(+ : sum) num_threads(2)
    for (i = 0; i < n; i++)
    {
        sum = sum + arr[i];
    }
    cout << "\nSum = " << sum << "\n";
}

void s_max(int arr[], int n)
{
    int max_val = INT_MIN;
    int i;
    for (i = 0; i < n; i++)
    {
        if (arr[i] > max_val)
        {
            max_val = arr[i];
        }
    }
    cout << "\nMax value = " << max_val << "\n";
}

void p_max(int arr[], int n)
{
    int max_val = INT_MIN;
    int i;
#pragma omp parallel for reduction(max : max_val) num_threads(2)
    for (i = 0; i < n; i++)
    {
        if (arr[i] > max_val)
        {
            max_val = arr[i];
        }
    }
    cout << "\nMax value = " << max_val << "\n";
}

void s_min(int arr[], int n)
{
    int min_val = INT_MAX;
    int i;
    for (i = 0; i < n; i++)
    {
        if (arr[i] < min_val)
        {
            min_val = arr[i];
        }
    }
    cout << "\nMin value = " << min_val << "\n";
}

void p_min(int arr[], int n)
{
    int min_val = INT_MAX;
    int i;
    #pragma omp parallel for reduction(min : min_val) num_threads(2)
    for (i = 0; i < n; i++)
    {
        if (arr[i] < min_val)
        {
            min_val = arr[i];
        }
    }
    cout << "\nMin value = " << min_val << "\n";
}

string timeCalulator(function<void()> traversal_fn)
{
	auto start = chrono::high_resolution_clock::now();
	
	traversal_fn();
	
	auto stop = chrono::high_resolution_clock::now();

	auto result = stop - start;
	
	auto duration = chrono::duration_cast<chrono::microseconds>(result);
	
	return to_string(duration.count());
}


int main()
{
    int *a, n, i;
    cout << "Specify array length.\n";
    cin >> n;
    
    a = new int[n];
    for (int i = 0; i < n; i++)
    {
        a[i] = rand() % n;
    }
    cout << "Generated random array of length " << n << "\n\n";
    omp_set_num_threads(2);

    cout << "Sequential Min: " << timeCalulator([&] {s_min(a, n);}) << "ms\n";
    cout << "Parallel (2) Min: " << timeCalulator([&] {p_min(a, n);}) << "ms\n";

    cout << "\nSequential Max: " << timeCalulator([&] {s_max(a, n);}) << "ms\n";
    cout << "Parallel (2) Max: " << timeCalulator([&] {p_max(a, n);}) << "ms\n";

    cout << "\nSequential Sum: " << timeCalulator([&] {s_sum(a, n);}) << "ms\n";
    cout << "Parallel (2) Sum: " << timeCalulator([&] {p_sum(a, n);}) << "ms\n";

    cout << "\nSequential Average: " << timeCalulator([&] {s_avg(a, n);}) << "ms\n";
    cout << "Parallel (2) Average: " << timeCalulator([&] {p_avg(a, n);}) << "ms\n";

    return 0;
}
//g++ -fopenmp BFS.cpp -o BFS
//./BFS


%%cu
#include <stdio.h>

__global__ void reduce_min_max_sum_avg(int* input, int* output, int size) {
    extern __shared__ int sdata[];

    unsigned int tid = threadIdx.x;
    unsigned int i = blockIdx.x * blockDim.x + threadIdx.x;

    // Load input elements into shared memory
    sdata[tid] = (i < size) ? input[i] : 0;
    __syncthreads();

    // Parallel reduction in shared memory
    for (unsigned int s = blockDim.x / 2; s > 0; s >>= 1) {
        if (tid < s) {
            sdata[tid] = min(sdata[tid], sdata[tid + s]);  // Min operation
            sdata[tid] = max(sdata[tid], sdata[tid + s]);  // Max operation
            sdata[tid] += sdata[tid + s];                  // Sum operation
        }
        __syncthreads();
    }

    // Write the reduced value to output
    if (tid == 0) {
        output[blockIdx.x] = sdata[0];
    }
}

int main() {
    int size = 1024;  // Size of the input array
    int block_size = 256;
    int num_blocks = (size + block_size - 1) / block_size;

    // Generate input data
    int* input = new int[size];
    for (int i = 0; i < size; ++i) {
        input[i] = i + 1;
    }

    // Allocate device memory
    int* d_input;
    int* d_output;
    cudaMalloc((void**)&d_input, size * sizeof(int));
    cudaMalloc((void**)&d_output, num_blocks * sizeof(int));

    // Copy input data to device memory
    cudaMemcpy(d_input, input, size * sizeof(int), cudaMemcpyHostToDevice);

    // Launch kernel for parallel reduction
    reduce_min_max_sum_avg<<<num_blocks, block_size, block_size * sizeof(int)>>>(d_input, d_output, size);

    // Allocate host memory for output
    int* output = new int[num_blocks];

    // Copy output data from device memory to host memory
    cudaMemcpy(output, d_output, num_blocks * sizeof(int), cudaMemcpyDeviceToHost);

    // Perform reduction on host
    int min_val = output[0];
    int max_val = output[0];
    int sum_val = output[0];
    for (int i = 1; i < num_blocks; ++i) {
        min_val = min(min_val, output[i]);  // Minimum value
        max_val = max(max_val, output[i]);  // Maximum value
        sum_val += output[i];                // Sum value
    }
    float avg_val = static_cast<float>(sum_val) / size;  // Average value

    printf("Min: %d\n", min_val);
    printf("Max: %d\n", max_val);
    printf("Sum: %d\n", sum_val);
    printf("Average: %.2f\n", avg_val);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_output);

    // Free host memory
    delete[] input;
    delete[] output;

    return 0;
}